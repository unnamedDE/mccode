
const consoleStyles = require('./consoleStyles.js');
const generate = require('./generateFileStructure.js');

module.exports = (args, options) => {
  const {fullError} = options;
  const name = args[0];
  const type = args[1] || 'datapack';

  switch(type) {

    case "datapack":
      if(!name) return console.log(consoleStyles.FgRed + "Please specify a namespace for the datapack" + consoleStyles.Reset);

      const structure = {};
      structure[name] = {
        "pack.mcmeta": JSON.stringify({"pack": {"pack_format": 1,"description": "Datapack generated by MCCode"}}, null, '\t'),
        "data": {
          "minecraft": {
            "tags": {
              "functions": {
                "tick.json": JSON.stringify({"replace": false, "values": [`${name}:tick`]}, null, '\t'),
                "load.json": JSON.stringify({"replace": false, "values": [`${name}:load`]}, null, '\t'),
              }
            }
          }
        },
      }
      structure[name].data[name] = {
        "functions": null,
        "recipes": null,
        "advancements": null,
        "loot_tables": null,
        "tags": {
          "entities": null,
          "blocks": null,
          "items": null,
          "fluids": null,
          "functions": null,
        },
        "mccode": {
          "tick.mccode": "!file: ./tick\n!type: mcfunction\n\n",
          "load.mccode": "!file: ./load\n!type: mcfunction\n\n",
        },
      }

      generate(structure, './', {logs: true})
      break;

      default:
      console.log(consoleStyles.FgRed + 'Please select a valid type to generate' + consoleStyles.Reset);
      break;
  }

}
